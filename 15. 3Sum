1. i != j, i != k, and j != k, but nums[i] could equal to nums[j] for one case;
		[1,2,3] and [2,1,3] are also counted as one case
2. permutation, combination
3.`1 != 0 != -1` is True. use and if you want to ensure any pair is unequal
4.`if (j != k) and (j != -k-j) and (k != -k-j):` to avoid counting a case twice
5. multi pointers method is used in binary search. usually j=i+1 or j=len()-1


class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        count_0 = 0
        count_1 = 0
        count_2 = 0
        count_3 = 0
        count_4 = 0
        
        result = []
        
        n = len(nums)
#        number -> count
        nums_dict = {}
        
#        count 0 and create a dictionary
        for i in range(n):
            if nums[i] == 0:
                count_0 += 1
            else:
                if nums[i] in nums_dict:
                    nums_dict[nums[i]] += 1
                else:
                    nums_dict[nums[i]] = 1
        
        for j in nums_dict.keys():
#             case 1: a, 0, b=-a
            if -j in nums_dict:
#                every pair will count twice
                count_1 += 1
                if [-j, 0, j] not in result:
                    if count_0 > 0:
                        result.append([j, 0, -j])
    
#            case 2: a, b=-a/2, c=-a/2
            if -j/2 in nums_dict:
                if nums_dict[-j/2] >= 2:
                    count_2 += 1
                    result.append([j, -j/2, -j/2])
        
#            case 3: a, b, c=-a-b
            for k in nums_dict.keys():
                if -k-j in nums_dict:
                    if (j != k) and (j != -k-j) and (k != -k-j):
                        if j < k and j < -k-j and k < -k-j:
                            count_3 += 1
                            result.append([j, k, -k-j])
                       
        # case 4: 0, 0, 0
        if count_0 >= 3:
            count_4 += 1
            result.append([0, 0, 0])
        print("case1,2,3,4:", count_1 // 2, count_2, count_3, count_4)
        return result
        
        # complexity: time O(n^2) because two nested loop; space O(n) because anxiliary map
