1. namespace of max_area
2. the depth-first search, count 1 and change 1 to 0 algorithm is pretty straight forward, two tips:
		(1) all the 4 directions of (i, j) should be considered, not just right and doen. 
			case [[0,1], [1,1]], (0, 1) == 1 calls the find_max_area() method, if only go right and doen,       (1, 0) will never be visited
		(2) for the up direction, (i-1 >= 0); doe the left direction, (j - 1 >= 0).
			 because list[-1] represents the end of the list
       
       
class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
#         grid[i][j], count += 1 when meet 1, and then depth search and change all of 1 to 0
        
        global_max_area = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    # area = 0
                    k = self.find_max_area(grid, i, j)
                    if k > global_max_area:
                        global_max_area = k
        return global_max_area
    
    def find_max_area(self, grid, i, j):
        m = len(grid)-1
        n = len(grid[0])-1
        
        max_area = 0
        
        if grid[i][j] == 1:
            max_area += 1
            grid[i][j] = 0
        
        if (i+1 <= m) and (grid[i+1][j] == 1):
            grid[i+1][j] = 0
            max_area += 1
            max_area += self.find_max_area(grid, i+1, j)
            
        # not visited    
        if (i-1 >= 0) and (grid[i-1][j] == 1):
            grid[i-1][j] = 0
            max_area += 1
            max_area += self.find_max_area(grid, i-1, j)
            
        # not visited
        if (j - 1 >= 0) and (grid[i][j-1] == 1):
            grid[i][j-1] = 0
            max_area += 1
            max_area += self.find_max_area(grid, i, j-1)
            
        if (j+1 <= n) and (grid[i][j+1] == 1):
            grid[i][j+1] = 0
            max_area += 1
            max_area += self.find_max_area(grid, i, j+1)
            
        return max_area  
